#include<GL\glut.h>
#include<GL\GLU.h>
#include<GL\GL.h>

//1번 우선 제가 원하는 결과값은 <원근 투영>을 이용하여 육면체와 주전자의 앞뒤 관계에 의해 크기가 다르게 보이도록 그리는 것을 나타내는 것이고
// 워드에 첨부한 결과값은 제가 직접 짜본 코딩입니다. 앞뒤 관계가 명확히 어떤 앞뒤 관계인지 모르겠더라고요. 같은 선상에서 어떤 건 크기가 크고 작은 걸 나타내라는 것인지 아니면 
// 제가 짜서 나온 결과값처럼 나타내라는 것인지 많이 헷갈리더라고요.
// 이것은 주전자입니다.
void MyDisplay() {
	glClear(GL_COLOR_BUFFER_BIT); // 배경색으로 화면을 지운다.
	glViewport(0, 0, 300, 300);
	glVertex3f(-0.5, -0.5, 0.0);
	glVertex3f(0.5, -0.5, 0.0);
	glVertex3f(0.5, 0.5, 0.0);
	glVertex3f(-0.5, 0.5, 0.0);

	// OPEN GL의 계산은 코딩 순서와 반대
	// 투상 좌표를 정의하기 위해 우선 시점 좌표가 정해져야 함.
	// 따라서 glMartrixMode(GL_PROJECTION) -> glMartixMode(GL_MODELVIEW) 순서로 코딩

	// 투상 좌표계
	glMatrixMode(GL_PROJECTION); //투상행렬 생성
	glLoadIdentity(); // 현 변환행렬을 항등행렬(I)로 초기화
	gluPerspective(120, 1.0, 1, 10);

	//모델, 시점 좌표계
	glMatrixMode(GL_MODELVIEW); // 작업 대상은 모델 뷰 행렬
	glLoadIdentity(); // 현 변환행렬을 항등행렬(I)로 초기화
	gluLookAt(0, 0, 2, 0, 0, 0, 0, 1, 0);

	glColor3f(1.0, 0.0, 0.0); // 현 색을 빨간색으로 설정
	glTranslatef(1.0, 0., 0.0);
	glutWireTeapot(0.6); // 주전자 그린다. 

	glColor3f(1.0, 0.0, 0.0); // 현 색을 빨간색으로 설정
	glTranslatef(-2.0, 0.0, -1.0);
	glutWireTeapot(0.6); // 주전자 그린다. 



	glFlush();

}

int main(int argc, char**argv) {
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_RGBA);
	glutInitWindowSize(300, 300);
	glutInitWindowPosition(0, 0);
	glutCreateWindow("JiYoon Open GL");
	glClearColor(0.0, 0.0, 0.0, 1.0);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	glOrtho(-1.0, 1.0, -1.0, 1.0, -1.0, 1.0);
	glutDisplayFunc(MyDisplay);
	glutMainLoop();
	return 0;
}

#include<GL\glut.h>
#include<GL\GLU.h>
#include<GL\GL.h>

//2번도 역시 1번과 같이 우선 제가 원하는 결과값은 <원근 투영>을 이용하여 육면체와 주전자의 앞뒤 관계에 의해 크기가 다르게 보이도록 그리는 것을 나타내는 것이고
// 워드에 첨부한 결과값은 제가 직접 짜본 코딩입니다. 앞뒤 관계가 명확히 어떤 앞뒤 관계인지 모르겠더라고요. 같은 선상에서 어떤 건 크기가 크고 작은 걸 나타내라는 것인지 아니면 
// 제가 짜서 나온 결과값처럼 나타내라는 것인지 많이 헷갈리더라고요.
// 이것은 육면체입니다.
void MyDisplay() {
	glClear(GL_COLOR_BUFFER_BIT); // 배경색으로 화면을 지운다.
	glViewport(0, 0, 300, 300);
	glVertex3f(-0.5, -0.5, 0.0);
	glVertex3f(0.5, -0.5, 0.0);
	glVertex3f(0.5, 0.5, 0.0);
	glVertex3f(-0.5, 0.5, 0.0);

	// OPEN GL의 계산은 코딩 순서와 반대
	// 투상 좌표를 정의하기 위해 우선 시점 좌표가 정해져야 함.
	// 따라서 glMartrixMode(GL_PROJECTION) -> glMartixMode(GL_MODELVIEW) 순서로 코딩

	// 투상 좌표계
	glMatrixMode(GL_PROJECTION); //투상행렬 생성
	glLoadIdentity(); // 현 변환행렬을 항등행렬(I)로 초기화
	gluPerspective(120, 1.0, 1, 10);

	//모델, 시점 좌표계
	glMatrixMode(GL_MODELVIEW); // 작업 대상은 모델 뷰 행렬
	glLoadIdentity(); // 현 변환행렬을 항등행렬(I)로 초기화
	gluLookAt(0, 0, 2, 0, 0, 0, 0, 1, 0);

	glColor3f(1.0, 1.0, 0.0); // 현 색을 노란색으로 설정
	glTranslatef(0.1, 0.5, 0.0);
	glutWireCube(1); // 육면체를 그린다.


	glColor3f(1.0, 1.0, 0.0); // 현 색을 노란색으로 설정
	glTranslatef(-2.0, 0.0, -1.0);
	glutWireCube(1); // 육면체를 그린다.



	glFlush();

}

int main(int argc, char**argv) {
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_RGBA);
	glutInitWindowSize(300, 300);
	glutInitWindowPosition(0, 0);
	glutCreateWindow("JiYoon Open GL");
	glClearColor(0.0, 0.0, 0.0, 1.0);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	glOrtho(-1.0, 1.0, -1.0, 1.0, -1.0, 1.0);
	glutDisplayFunc(MyDisplay);
	glutMainLoop();
	return 0;
}


//3번 직교 투영중 가장 대표적인 평행 투영 방법을 이용하여 주전자를 윈도우에 그리는게 제가 원하는 결과값입니다
// 근데 제가 나온 결과값은 평행 투영 방법보단 경사 투영에 가까운 거 같습니다 ( 제 생각입니다, 현재 독학 중이라 개념이 정확하게 확립이 되어있지 않습니다,,,)
// 제가 원하는 결과값과 제가 짜서 나온 결과값이 일치한지 궁금합니다. 

void MyDisplay() {
	glClear(GL_COLOR_BUFFER_BIT); // 배경색으로 화면을 지운다.
	glViewport(0, 0, 300, 300);
	glVertex3f(-0.5, -0.5, 0.0);
	glVertex3f(0.5, -0.5, 0.0);
	glVertex3f(0.5, 0.5, 0.0);
	glVertex3f(-0.5, 0.5, 0.0);

	//glMatrixMode(GL_MODELVIEW); // 작업 대상은 모델 뷰 행렬

	glMatrixMode(GL_PROJECTION); //투상행렬 생성
	glLoadIdentity(); // 현 변환행렬을 항등행렬(I)로 초기화
	glColor3f(1.0, 0.0, 0.0); // 현 색을 빨간색으로 설정
	glOrtho(-1.0, 1.0, -1.0, 1.0, -1.0, 1.0); // 변경 전
	glTranslatef(0.2, 0.0, 0.0);
	glScalef(0.5, 0.5, 0.5); // 모델 좌표계 x,y,z 축의 눈금이 전역좌표계 눈금의 sx,sy,sz배만큼 되도록 크기를 조절하는 함수. 
	glutWireTeapot(0.5); // 주전자 그린다. 


	//glMatrixMode(GL_MODELVIEW); // 작업 대상은 모델 뷰 행렬

	glMatrixMode(GL_PROJECTION); //투상행렬 생성
	glLoadIdentity(); // 현 변환행렬을 항등행렬(I)로 초기화
	glOrtho(-3.0, 3.0, -3.0, 3.0, -1.0, 1.0); // 종횡비를 유지하면서 변경
	glTranslatef(0.2, 0.0, 0.0);
	glScalef(0.5, 0.5, 0.5); // 모델 좌표계 x,y,z 축의 눈금이 전역좌표계 눈금의 sx,sy,sz배만큼 되도록 크기를 조절하는 함수. 
	glColor3f(1.0, 0.0, 0.0); // 현 색을 빨간색으로 설정
	glutWireTeapot(0.5); // 주전자 그린다. 


	glMatrixMode(GL_PROJECTION); //투상행렬 생성

	glFlush();

}

int main(int argc, char**argv) {
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_RGBA);
	glutInitWindowSize(300, 300);
	glutInitWindowPosition(0, 0);
	glutCreateWindow("JiYoon Open GL");
	glClearColor(0.0, 0.0, 0.0, 1.0);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	glOrtho(-1.0, 1.0, -1.0, 1.0, -1.0, 1.0);
	glutDisplayFunc(MyDisplay);
	glutMainLoop();
	return 0;
}


